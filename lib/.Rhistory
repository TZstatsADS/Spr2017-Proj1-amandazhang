plot(ecdf(c(1:10), pgamma(c(1:10), shape = 1, scale = 2)))
plot(ecdf(c(1:10)), pgamma(c(1:10), shape = 1, scale = 2))
library(MASS)
plot(ecdf(pgamma(cats$Hwt, shape = a, scale = s)))
plot(ecdf(pgamma(cats$Hwt, shape = 19, scale = 1)))
plot(ecdf(pgamma(cats$Hwt, shape = 19, scale = 0.5)))
gamma.ll <- function(params, data) {
a <- params[1]
s <- params[2]
return(sum(dgamma(data, shape = a, scale = s, log = TRUE)))
}
gamma.ll(c(19, 0.05), cats$Hwt)
nlm(gamma.ll, c(19, 1), data = cats$Hwt)[1:3]
neg.gamma.ll <- function(params, data) {
a <- params[1]
s <- params[2]
return(-sum(dgamma(data, shape = a,
scale = s, log = TRUE)))
}
nlm(neg.gamma.ll, c(19, 1), data = cats$Hwt)$estimate
nlm(neg.gamma.ll, c(19, 2), data = cats$Hwt)$estimate
nlm(neg.gamma.ll, c(19, 20), data = cats$Hwt)$estimate
nlm(neg.gamma.ll, c(100, 1), data = cats$Hwt)$estimate
?nlm
plot(ecdf(pgamma(cats$Hwt, shape = a, scale = s)),
main = "Calibration of gamma distribution for cat hearts")
plot(ecdf(cats$Hwt))
plot(ecdf(cats$Hwt), pgamma(cats$Hwt, shape = 19, scale = 0.5))
?sample
sample(1:50, size = 30)
index1 <- sample(1:50, size = 30)
a <- 1:50
a
a[index1]
index1
a[!index1]
a[-index1]
?grad
library(numDeriv)
?grad
x0 <- c(-1.9, -1.9)
n    <- length(x0)
n
?grad
max.iter = 200
stopping.deriv = 0.01
xmat <- matrix(0, nrow = n, ncol = max.iter)
xmat[,1] <- x0
grad.cur <- grad(f, xmat[ ,1])
grad.cur
simpleFun = function(x) {
return(x[1]^2 + 1/3*x[2]^2)
}
grad.cur <- grad(f, xmat[ ,1])
grad.cur
grad.cur <- grad(simpleFun, xmat[ ,1])
grad.cur
?apply
?lapply
?tapply
head(state)
head(states)
states <- data.frame(state.x77, Region = state.region)
head(states, 3)
states[1, 7]
cor.v1.v2 <- function(v1, v2 = states[, "Frost"]) {
return(cor(v1, v2))
}
a <- apply(states, 2 , cor.v1.v2)
a <- apply(states[, 1:8], 2 , cor.v1.v2)
a
apply(states[, 1:8], 2, cor, states[, "Frost"])
?corresp
?cor
apply(states[, 1:8], 2, cor, y = states[, "Frost"])
apply(states[, 1:8], 2, cor, x= states[, "Frost"])
apply(states[, 1:8], 2, cor, y= states[, "Frost"])
mean.omitting.one <- function(i, vec) {
return(mean(vec[-i]))
}
my.vec <- states[ ,"Frost"]
n      <- length(my.vec)
my.vec.jack <- lapply(1:n, FUN = mean.omitting.one, vec = my.vec)
head(my.vec.jack, 3)
my.vec.jack <- sapply(1:n, FUN = mean.omitting.one, vec = my.vec)
head(my.vec.jack)
apply(states, 2, range)
apply(states[1:10], 1, range)
apply(states[1:10, ], 1, range)
dim(apply(states[1:10, ], 1, range))
states$devision <- state.division
unique(state.division)
tapply(states$Income, states$devision, mean)
which.max(tapply(states$Income, states$devision, mean))
head(states)
?split
split(c(1:10), 5)
split(c(1:10), factor(5))
n <- 10; nn <- 100
g <- factor(round(n * runif(n * nn)))
x <- rnorm(n * nn) + sqrt(as.numeric(g))
xg <- split(x, g)
xg
n * runif(n * nn))
n * runif(n * nn)
g
x
xg
x
xg
head(x, 50)
split(c(1:20), c(1,2))
split(c(1:20), c(1,3))
aggregate(states[,1:8], by = list(states$Region), mean)
list(states$Region)
aggregate(states[, 1:8], by = list(states$Region, states$Division), mean)
aggregate(states[, 1:8], by = list(states$Region, states$devision), mean)
states.by.div <- split(states, f = states$devision)
states.by.div[[1]]
states.by.div[1]
head(states.by.div, 2)
lapply(states.by.div, head, 2)
sapply(states.by.div, head, 2)
sapply(states.by.div, grad.by.lit.median)
grad.by.lit.median <- function( df) {
prop <- 100*df$HS.Grad / (100-Illiteracy)
return(median(prop))
}
sapply(states.by.div, grad.by.lit.median)
grad.by.lit.median <- function( df) {
prop <- 100*df$HS.Grad / (100-df$Illiteracy)
return(median(prop))
}
sapply(states.by.div, grad.by.lit.median)
sapply(states.by.div, function(a) {median(df$HS.Grad)})
sapply(states.by.div, function(a) {median(a$HS.Grad)})
head(cats, 3)
hwt.order <- order(cats$Hwt) # By increasing heart weight
cats.order <- cats[hwt.order, ] # Reorder rows
head(cats.order, 3)
cats[, 1:5]
head(cats)
t(cats)[1:5]
t(cats)[1:5, ]
t(cats)[, 1:5 ]
head(t(cat()))
head(t(cats))
fha <- read.csv("~/Documents/Columbia/GR5206/Lectures/fha.csv", na.strings = "NA", colClasses = c("character", "double", "double", "double"))
nrow(fha)
colnames(fha)
head(fha, 3)
ua <- read.csv("~/Documents/Columbia/GR5206/Lectures/ua.txt", sep = ";")
nrow(ua)
head(ua, 2)
head(ua, 10)
df2 <- merge(x = fha, y = ua, by.x = "Population", by.y = "POP")
nrow(df2)
tail(df2, 2)
head(states)
a <- split(states, f = states$devision)
tapply(a, states$Region, nrow)
?tapply
library(plyr)
ddply(states, .(devision, Region), nrow)
ddply(states, .(devision), function(df) {table(df$Region)})
sapply(split(states, states$devision), function(df) {table(df$Region)})
?split
sapply(split(states, list(states$devision)), function(df) {table(df$Region)})
sapply(split(states, list(states$devision, states$Region)), table)
library("ISLR")
install.packages("ISLR")
library("ISLR")
head(USArrests)
USArrests <- apply(USArrests, 2, scale)
head(USArrests)
pca <- prcomp(USArrests)
pca
biplot(pca)
library("ISLR")
head(USArrests)
rm(USArrests)
library("ISLR")
head(USArrests)
head(USArrests)
pca
pca <- prcomp(USArrests, scale. = T)
pca
pca <- prcomp(USArrests)
pca
a <- c(10.6085, 1.38776, 0.0007188)
a^2/sum(a)
?scale
plot(1:ncol(strike.coef), strike.coef[2, ],
xaxt = "n", xlab = "", ylab = "Regression coefficient",
main="Countrywise labor activity by leftwing score")
strikes <- read.csv("~/Documents/Columbia/GR5206/Lectures/strikes.csv", as.is = TRUE)
dim(strikes)
head(strikes, 3)
italy.strikes <- subset(strikes, country == "Italy")
# Equivalently,
italy.strikes <- strikes[strikes$country == "Italy", ]
dim(italy.strikes)
head(italy.strikes, 5)
italy.fit <- lm(strike.volume ~ left.parliament, data = italy.strikes)
plot(strike.volume~left.parliament, data = italy.strikes,
main="Italy Strike Volume Versus Leftwing Alignment",
ylab = "Strike volume", xlab = "Leftwing Alignment")
abline(italy.fit, col = 2)
my.strike.lm <- function(country.df) {
return(lm(strike.volume ~ left.parliament, data = country.df)$coeff)
}
my.strike.lm(subset(strikes, country == "Italy"))
strike.coef  <- NULL
my.countries <- c("France", "Italy", "USA")
for (this.country in my.countries) {
country.dat <- subset(strikes, country == this.country)
new.coefs   <- my.strike.lm(country.dat)
strike.coef <- cbind(strike.coef, new.coefs)
}
colnames(strike.coef) <- my.countries
strike.coef
# Splitting the data with split()
strikes.split <- split(strikes, strikes$country)
names(strikes.split)
# Now the apply step
strike.coef <- sapply(strikes.split[1:12], my.strike.lm)
strike.coef
plot(1:ncol(strike.coef), strike.coef[2, ],
xaxt = "n", xlab = "", ylab = "Regression coefficient",
main="Countrywise labor activity by leftwing score")
axis(side = 1, at = 1:ncol(strike.coef), labels = colnames(strike.coef), las = 2, cex.axis = 0.5)
abline(h = 0, col = "grey")
plot(1:ncol(strike.coef), strike.coef[2, ],
xaxt = "n", xlab = "", ylab = "Regression coefficient",
main="Countrywise labor activity by leftwing score")
axis(side = 1, at = 1:ncol(strike.coef), labels = colnames(strike.coef), las = 3, cex.axis = 0.5)
abline(h = 0, col = "grey")
qf(0.95, 2, 27)
t  <- seq(-10, 10, by = .01)
df <- c(1, 2, 5, 30, 100)
plot(t, dnorm(t), lty = 1, col = "red", ylab = "f(t)",
main = "Student's t")
for (i in 1:5) {
lines(t, dt(t, df = df[i]), lty = i)
}
legend <- c(paste("df=", df, sep = ""), "N(0,1)")
legend("topright", legend = legend, lty = c(1:5, 1),
col = c(rep(1, 5), 2))
plot(t, dnorm(t), lty = 1, col = "red", ylab = "f(t)",
main = "Student's t")
plot(t, dnorm(t), lty = 1, col = "red", ylab = "f(t)",
main = "Student's t", cex = 0.5)
plot(t, dnorm(t), lty = 1, col = "red", ylab = "f(t)",
main = "Student's t", cex = 0.3)
for (i in 1:5) {
lines(t, dt(t, df = df[i]), lty = i)
}
legend <- c(paste("df=", df, sep = ""), "N(0,1)")
legend("topright", legend = legend, lty = c(1:5, 1),
col = c(rep(1, 5), 2))
n = 100
x <- sample(1:6, size = n, replace = T)
head(x, 10)
table(x)/n
x1 <- runif(100, min = 1, max = 6)
table(round(x1))/100
x1 <- runif(100, min = 1, max = 6)
table(round(x1))/100
x1 <- runif(100, min = 1, max = 6)
table(round(x1))/100
x1 <- runif(100, min = 1, max = 6)
table(round(x1))/100
?floor
x1 <- floor(100, min = 1, max = 6)
x1 <- runif(100, min = 1, max = 6)
table(floor(x1))/100
x1 <- runif(100, min = 1, max = 7)
table(floor(x1))/100
hist(cats$Hwt)
probability
hist(cats$Hwt, probability = TRUE, ylim = c(0, 0.17))
lines(density(cats$Hwt), lty = "dashed")
gamma.MMest <- function(data) {
m <- mean(data)
v <- var(data)
return(c(a = m^2/v, s = v/m))
}
cat.MM <- gamma.MMest(cats$Hwt)
curve(dgamma(x, shape = cat.MM["a"], scale = cat.MM["s"]),
add = TRUE, col = "blue")
hist(cats$Hwt, probability = TRUE, ylim = c(0, 0.17))
lines(density(cats$Hwt), lty = "dashed")
lines(dgamma(x, shape = cat.MM["a"], scale = cat.MM["s"]),
add = TRUE, col = "blue")
lines(dgamma(x, shape = cat.MM["a"], scale = cat.MM["s"]),col = "blue")
hist(cats$Hwt, probability = TRUE, ylim = c(0, 0.17))
lines(density(cats$Hwt), lty = "dashed")
hist(cats$Hwt, probability = TRUE, ylim = c(0, 0.17))
lines(density(cats$Hwt), lty = "dashed")
lines(dgamma(x, shape = cat.MM["a"], scale = cat.MM["s"]),col = "blue")
curve(dgamma(x, shape = cat.MM["a"], scale = cat.MM["s"]),
add = TRUE, col = "blue")
?curve
head(density(cats$Hwt))
?ks.test
ks.test(cats$Hwt, pgamma, shape = a, scale = s)
a <- cat.MM["a"]
s <- cat.MM["s"]
ks.test(cats$Hwt, pgamma, shape = a, scale = s)
ks.test(cats$Hwt, "pgamma", shape = a, scale = s)
ks.test(cats$Hwt[cats$Sex == "F"], cats$Hwt[cats$Sex == "M"])
head(iris)
data <- iris[, 3:4]
View(data)
clusters <- sample(1:3, nrow(data), replace = TRUE)
strikes <- read.csv("~/Documents/Columbia/GR5206/Lectures/strikes.csv", as.is = TRUE)
dim(strikes)
head(strikes, 3)
year.split <- split(strikes, strikes$year)
View(strikes)
max.rate <- max(year.mean[1:2, ])
year.split <- split(strikes, strikes$year)
mean_func <- function(df) {
return(apply(df[, c("unemployment", "inflation", "strike.volume")], 2, mean))
}
year.mean <- sapply(year.split, mean_func)
max.rate <- max(year.mean[1:2, ])
min.rate <- min(year.mean[1:2, ])
plot(colnames(year.mean), year.mean[1, ], xlab = "Year", ylab="Rate", type="l", ylim = c(min.rate, max.rate))
points(colnames(year.mean), year.mean[2, ], type="l", col = "red")
legend("topleft", c("Unemployment", "Inflation"), fill = c("black", "red"), cex = .5)
View(year.mean)
n <- 100
p <- 10
s <- 3
set.seed(0)
x <- matrix(rnorm(n*p), n, p)
b <- c(-0.7, 0.7, 1, rep(0, p-s))
y <- x %*% b + rt(n, df=2)
cor(x, y)
apply(x, 2, cor, y)
order(abs(cors), decreasing = TRUE)
cors <- apply(x, 2, cor, y)
order(abs(cors), decreasing = TRUE)
?grad
library(numDeriv)
?grad
plot(0,type="n",xlim=c(0,45),ylim=c(0,45),xlab="cars",ylab="trucks", cex.axis = 2, cex.lab = 2)
abline(70/3,-1/3,lty="dashed",lwd=4)
abline(80/3,-2/3, lty = "dotted",lwd=4)
legend("topright",legend=c("labor","steel"),lty=c("dotted","dashed"), lwd = c(4,4), cex = 2)
for (i in 1:30) {abline(i,-13/27,col="grey",lwd=3)}
nodes <- read.csv("~/Documents/Columbia/GR5206/HWs/ckm_nodes.csv")
View(nodes)
table(nodes$adoption_date)
sum(is.na(nodes$adoption_date))
ind_notna <- which(nodes$adoption_date!=NA)
ind_notna <- which(is.na(nodes$adoption_date))
ind_notna <- which(is.na(nodes$adoption_date)==F)
nodes <- nodes[ind_notna, ]
month.info <- table(nodes$adoption_date)[1:17]
plot(names(month.info), month.info, xlab = "Month Number", ylab = "Number of Doctors", main = "Doctors Beginning to Prescribe Each Month")
plot(names(month.info), cumsum(month.info), xlab = "Month Number", ylab = "Number of Doctors", main = "Total Doctors Prescribing Each Month")
logic_2 <- (nodes$adoption_date <=2)
index_m2 <- which(logic_2==T)
logic_14 <- (nodes$adoption_date > 14)
index_m14 <- which(logic_14==T)
network <- read.table("~/Documents/Columbia/GR5206/HWs/ckm_network.txt", sep = " ")
network <- network[index_nonna, index_nonna]
index_nonna <- which(is.na(nodes$adoption_date)==FALSE)
network <- network[index_nonna, index_nonna]
View(network)
apply(network, 2, sum)
apply(network, 2, sum)[41]
apply(network, 1, sum)[41]
nodes <- read.csv("~/Documents/Columbia/GR5206/HWs/ckm_nodes.csv")
index_nonna <- which(is.na(nodes$adoption_date)==FALSE)
nodes <- nodes[index_nonna, ]
network <- read.table("~/Documents/Columbia/GR5206/HWs/ckm_network.txt", sep = " ")
network <- network[index_nonna, index_nonna]
apply(network, 1, sum)[41]
?nlm
View(network)
View(nodes)
table(nodes$attend_meetings)
table(nodes$attend_meetings, nodes$free_time_with)
avg(c(1,2,3))
qf(0.95, 2, 27)
qf(0.05, 2, 27)
？dotchart
?dotchart
library("rvest")
library("tibble")
library("qdap")
library("sentimentr")
library("gplots")
library("dplyr")
library("tm")
library("syuzhet")
library("factoextra")
library("beeswarm")
library("scales")
library("RColorBrewer")
library("RANN")
library("tm")
library("topicmodels")
library("wordcloud")
library("tidytext")
source("../lib/plotstacked.R")
source("../lib/speechFuncs.R")
setwd("~/scr/ADS-Spring2017/Spr2017-Proj1-amandazhang/lib")
library("rvest")
library("tibble")
library("qdap")
library("sentimentr")
library("gplots")
library("dplyr")
library("tm")
library("syuzhet")
library("factoextra")
library("beeswarm")
library("scales")
library("RColorBrewer")
library("RANN")
library("tm")
library("topicmodels")
library("wordcloud")
library("tidytext")
source("../lib/plotstacked.R")
source("../lib/speechFuncs.R")
folder.path="../data/inaugurals/"
speeches=list.files(path = folder.path, pattern = "*.txt")
prex.out=substr(speeches, 6, nchar(speeches)-4)
ff.all<-Corpus(DirSource(folder.path))
ff.all<-tm_map(ff.all, stripWhitespace)
ff.all<-tm_map(ff.all, content_transformer(tolower))
ff.all<-tm_map(ff.all, removeWords, stopwords("english"))
ff.all<-tm_map(ff.all, removeWords, character(0))
ff.all<-tm_map(ff.all, removePunctuation)
tdm.all<-TermDocumentMatrix(ff.all)
tdm.tidy=tidy(tdm.all)
tdm.overall=summarise(group_by(tdm.tidy, term), sum(count))
wordcloud(tdm.overall$term, tdm.overall$`sum(count)`,
scale=c(5,0.5),
max.words=100,
min.freq=1,
random.order=FALSE,
rot.per=0,
use.r.layout=F,
random.color=FALSE,
colors=brewer.pal(9,"Blues"))
dtm <- DocumentTermMatrix(ff.all,
control = list(weighting = function(x)
weightTfIdf(x,
normalize =FALSE),
stopwords = TRUE))
ff.dtm=tidy(dtm)
library(shiny)
shinyApp(
ui = fluidPage(
fluidRow(style = "padding-bottom: 20px;",
column(4, selectInput('speech1', 'Speech 1',
speeches,
selected=speeches[5])),
column(4, selectInput('speech2', 'Speech 2', speeches,
selected=speeches[9])),
column(4, sliderInput('nwords', 'Number of words', 3,
min = 20, max = 200, value=100, step = 20))
),
fluidRow(
plotOutput('wordclouds', height = "400px")
)
),
server = function(input, output, session) {
# Combine the selected variables into a new data frame
selectedData <- reactive({
list(dtm.term1=ff.dtm$term[ff.dtm$document==as.character(input$speech1)],
dtm.count1=ff.dtm$count[ff.dtm$document==as.character(input$speech1)],
dtm.term2=ff.dtm$term[ff.dtm$document==as.character(input$speech2)],
dtm.count2=ff.dtm$count[ff.dtm$document==as.character(input$speech2)])
})
output$wordclouds <- renderPlot(height = 400, {
par(mfrow=c(1,2), mar = c(0, 0, 3, 0))
wordcloud(selectedData()$dtm.term1,
selectedData()$dtm.count1,
scale=c(4,0.5),
max.words=input$nwords,
min.freq=1,
random.order=FALSE,
rot.per=0,
use.r.layout=FALSE,
random.color=FALSE,
colors=brewer.pal(10,"Blues"),
main=input$speech1)
wordcloud(selectedData()$dtm.term2,
selectedData()$dtm.count2,
scale=c(4,0.5),
max.words=input$nwords,
min.freq=1,
random.order=FALSE,
rot.per=0,
use.r.layout=FALSE,
random.color=FALSE,
colors=brewer.pal(10,"Blues"),
main=input$speech2)
})
},
options = list(height = 600)
)
main.page <- read_html(x = "http://www.presidency.ucsb.edu/inaugurals.php")
inaug=f.speechlinks(main.page)
View(inaug)
